#before we install puppet enterprise we need to enable SElinux

cd /etc/selinux/
ls
vi config

once you set it in to permissive mode - need to reboot
reboot now

2.2 Installing Puppet Part 1

- puppet master install command: ./puppet-enterprise-installer
- Installation flags :
  - C - Use a pe.conf file to configure the PUppet Server.
  - D - Displays debugging information
  - h -Display help.
  -q - run in quite mode; the installation process is not displayed.
  - V - Display very verbose debugging information
  -y - Assumes yes/default and bypass nay prompts for user input.
  
  pe.conf
  - The pe.conf file is HOCON-formatted file that declares parameters and values needed to install and configure Puppet Enterprise.
  When the installation completes, you can find an updated pe.conf file in /etc/puppetlabs/enterprise/conf.d
  
  ex : 
  {
   "console_admin_password":"Sunday@123",
   "puppet_enterprise::puppet_master_host":"<puppet-master-fqdn>",
   "pe_install::puppet_master_dnsaltnames":[
     "puppet"
    ]
    }
   
  
Installation Directories:
- Puppet Enterprise configuration files are installed in/etc/puppetlabs/puppet for 
\*nix nodes and <COMMON_APPDATA>\\PuppetLabs for Windows nodes.
- Puppet Enterprise software binaries are installed in /opt/puppetlabs.
- Executable binaries are in /opt/puppetlabs/bin and /opt/puppetlabs/sbin.
- The installer automatically creates symlinks in /usr/local/bin.

- Code and Data Directories:
 - R10k : /etc/puppetlabs/r10k
 - environments : /etc/puppetlabs/code/environments
 - modules : Main directory for puppet modules(Applies to master only)
 - manifests : Contains the main strarting point for catalog compilation(applies to master only)
 - ssl: contains each node's certificate infrastruture ( all nodes)
  /etc/puppetlabs/puppet/ssl
 
 - Importent 
 3000 - Used for the web-based installer of the Puppet Master.
 8140 - The port on which the Puppet Master and agents communicate.
 61613 - Used by MCollective for orchestration requests by puppet agents
 443 - the web port used to access the puppet enterprise console
 5432 : PostgreSQL runs on this port. it is used by PuppetDB in split stack configuration. 
 8081 - The PuppetDB traffic/requrest port.
 8142 - Used by Orchestration services to accept inbound traffic/responses from the Puppet Agents.
 
 Puppet Enterprise Services :
 In CentOS 7, The Puppet Enterprise services are installed in /usr/lib/systemd/system.
 
 - pe-activemq : The ActiveMQ message server, which passes messages to the MCollective servers on agent nodes. Runs on servers with the Puppet master component.
 - pe-console-services: manages and serves the PE Console.
 - pe-puppetserver: The puppet master server, which manages the Puppet master component.
 - pe-nginx: Nginx, serves as a reverse-proxy to the PE console.
 - mcollective: The MCollective daemon, which listens for messages and invokes actions. Runs on every agent node.
 - puppet(on EL and Debian-based platforms): The Puppet agent daemon. Runs on every agent node.
 - pe-puppetdb and pe-postgreql : Daemons that manage and serve the database components. Note that pre-postgresql is only created if we install and manage PostgreSQL for you.
 - pe-orchestration-services: Runs the Puppet orchestration process.
 - pxp-agent: Runs the Puppet agent PXP process.
 
 Puppet Enterprise Logs:
  - puppet master logs:/var/log/puppetlabs/puppetserver
  - puppet agent logs: /var/log/messages or /var/log/system.log
  - ActiveMQ logs: /var/log/puppetlabs/activemq
  - MCollective serice logs: /var/log/puppetlabs
  - Console logs: /var/log/puppetlabs
  - installer logs:/var/log/puppetlabs/installer
  - Database logs:/var/log/puppetlabs/puppetdb and /var/log/puppetlabs/postgresql
  - orchestration logs:/var/log/puppetlabs
  
 2.3 Installing Puppet Part2:
 ----------------------------
 vi /root/pe.conf
 
 {
   "console_admin_password": "password_goes_here",
   "puppet_enterprise::puppet_master_host": "puppetmaster.jhanci.com",
   "pe_install::puppet_master_dnsaltnames": [
      "puppet",
      "master",
      "puppetmaster",
     ],
    "puppet_enterprise::use_application_services": true
   }
   
 2.3 Installing Puppet Par2
--------------------------
Split installation
1:PUppet master
2:puppet db
3:puppet pe-console

on node : 

curl -k https://puppetmaster.jhanci.com:8140/packages/current/install.bash | sudo bash

Sign Certification on master
puppet cert list
puppet cert sign node1.jhanci.com

on node:
puppet agent -t

on server:
Installation directories

cd /etc/puppetlabs
ls

cd puppet

cd /opt/puppetlabs - All binaries will install here in this path, all command line tools will be packed
ls

cd /etc/puppetlabs/puppet/ssl - All our certificate requests would be placed here

cd certificate_requests/
ls
cd ..

cd cert - All our certificate requests

#services directory
/usr/lib/systemd/system
ls
ls | grep 'pe-'

-------------
2.4 Puppet.conf

puppet.conf
- The puppet.conf file is located in /etc/puppetlabs/puppet
- Settings can be overridden at the command line

Config Sections:
----------------
- Main : The global section used by all commands and services.
- master : Used by the Puppet master service and the "puppet cert" command
- agent: Used by the Puppet agent service.
- user: Used by the "puppet apply" command

Note: Settings are loaded at service start time; to apply changes made to puppet.conf
a restart to the puppet service is required.

Interpolating Variables:
------------------------
The values of settings are available as variables within puppet.conf, and you can insert them into the values of other settings. To reference a setting as a variable, prefix its name with a dollar sign.
Example:
 $codedir
 $condir
 $vardir
 
 Sample puppet.conf for a Puppet Master:
 ---------------------------------------
 [main]
	certname = puppet.domain.com
	server = puppet.domain.com
	user = pe-puppet
	group = pe-puppet
	environment_timeout = 0
	app_management = true
	module_groups = base+pe_only
	environmentpath = /etc/puppetlabs/code/environments
	codedir = /etc/puppetlabs/code
 [agent]
	graph=true
 [master]
	node_terminus = classifier
	storeconfigs = true
	storeconfigs_backend = puppetdb
	reports = puppetdb
	certname = puppet.domain.com
	always_cache_features = true

	Sample puppet.conf for an Agent Node
	--------------------------------------
[main]
	server = puppet.domain.com
	certname = node1.jhanci.com

	Fundamental Settings, Agent
	-----------------------------
- Basic Settings:
	- ca_server: server used for certificate authority requests
	- certname: Certificate name to use when communicating with the server
	- server: Hostname of the Puppet master
	- environment: Defaults to Production

- Run behavior:
	- noop: Agent will not do any work, only simulate changes and report to the master
	- priority: Sets the nice command so catalog enforcement does not use up CPU
	- report: determines if reporting is enabled(defaults to true)
	- usechacheonfailure: Fall back to last known working catalog if convergence fails
	
- Service Behavior:
	- runinterval: How often puppet agent daemon runs
	- waitforcert: Keep trying to run puppet agent if the certificate is not initially available.

- Configuration Settings via the commmand line
	- puppet config set <SETTING NAME><VALUE> --section <CONFIG SECTION>
	
Demo: Remove certificate from agent
modify puppet.conf in agent node

on node:
rm -rf ssl

on master:
puppet cert list -a

puppet cert clean node1.jhanci.com

on agent:
puppet agent -t

update puppet.conf through command line
puppet config set runinterval 2m --section main

Restart the pppet services

systemctl restart puppet.service

check the logs in 
tail -f /var/log/messages

vi /etc/puppetlabs/puppet/puppet.conf

update in [main]
codedir = /etc/puppetlabs/code
environmentpath = $codedir/environments

Restart puppet master service
service pe-puppetserver restart

 


